import math
from operator import itemgetter

#################################################
# recommender class does user-based filtering and recommends items 
class UserBasedFilteringRecommender:
     
    
    ##################################
    # class instantiation method - initializes instance variables
    #
    # usersItemRatings:
    # users item ratings data is expected in the form of a nested dictionary:
    # at the top level, it has User Names as keys, and their Item Ratings as values;
    # and Item Ratings are themselves dictionaries with Item Names as keys, and Ratings as values
    # Example: 
    #     {"Angelica":{"Blues Traveler": 3.5, "Broken Bells": 2.0, "Norah Jones": 4.5, "Phoenix": 5.0, "Slightly Stoopid": 1.5, "The Strokes": 2.5, "Vampire Weekend": 2.0},
    #      "Bill":{"Blues Traveler": 2.0, "Broken Bells": 3.5, "Deadmau5": 4.0, "Phoenix": 2.0, "Slightly Stoopid": 3.5, "Vampire Weekend": 3.0}}
    #
    # k:
    # the number of nearest neighbors
    # defaults to 1
    #
    # NOTE: the number, names, or format of the input parameters to this method must NOT be changed.
    def __init__(self, usersItemRatings, k=1):
        
        # set self.usersItemRatings
        self.usersItemRatings = usersItemRatings
            
        # set self.k
        if k > 0:   
            self.k = k
        else:
            print ("    (FYI - invalid value of k (must be > 0) - defaulting to 1)")
            self.k = 1
            

    #################################################
    # calcualte the pearson correlation between two item ratings dictionaries userXItemRatings and userYItemRatings
    #
    # userXItemRatings and userYItemRatings data is expected in the form of dictionaries of item ratings
    # Example:
    #userXItemRatings = {"Blues Traveler": 3.5, "Broken Bells": 2.0, "Norah Jones": 4.5, "Phoenix": 5.0, "Slightly Stoopid": 1.5, "The Strokes": 2.5, "Vampire Weekend": 2.0}
    #userYItemRatings = {"Blues Traveler": 2.0, "Broken Bells": 3.5, "Deadmau5": 4.0, "Phoenix": 2.0, "Slightly Stoopid": 3.5, "Vampire Weekend": 3.0}
    #
    # NOTE: the number, names, or format of the input parameters to this method must NOT be changed.


         #Step 0 - Pearson Correlation between two dictionaries of rating
    
    def pearsonFn(self, userXItemRatings, userYItemRatings):
        
        
        # Things to keep in mind as you code this section:
        # (a) this method must calculate and return the pearson correlation between the two given dictionaries of items ratings.
        # (b) the number, names, or format of the input parameters to this method must NOT be changed.
        # (c) the method must use the computationally efficient form of pearson correlation to calucalte the pearson correlation
        # (d) the method must use only a total of 1 for loop to calculate the pearson correlation
        # (e) the method must compute the value of n as the number of common keys in the dictionaries 
        # (f) the method must perform the following error checks:
        #     if n=0, return value of -2
        #     if the denominator of the pearson correlation=0, return value of -2
        # (g) if neither of the error conditions in (f) occurred, return the pearson correlation
        
    
        sum_xy = sum_x = sum_y = sum_x2 = sum_y2 = n = 0
        
        for userx in userXItemRatings.keys():
            if userx in userYItemRatings.keys():
                n = n + 1
                x = userXItemRatings[userx]
                y = userYItemRatings[userx]
                sum_x = sum_x + x
                sum_y = sum_y + y
                sum_x2 = sum_x2 + pow(x,2)
                sum_y2 = sum_y2 + pow(y,2)
                sum_xy = sum_xy + (x*y)


        nr = sum_xy - (sum_x * sum_y) / n
        dr = math.sqrt(sum_x2-pow(sum_x,2)/n) * math.sqrt(sum_y2-pow(sum_y,2)/n)
        
        ## error check for n=0 or dr=0, eitherwill return -2 (invalid)
        
        if n == 0:
            return -2
        elif dr == 0:
            return -2
        else:
            pc = round(nr/dr, 2)
            return pc
    
    # make recommendations for userX from the k most similar nearest neigibors (NNs)
    # NOTE: the number, names, or format of the input parameters to this method must NOT be changed.

    def recommendKNN(self, userX):
        
        
        # Things to keep in mind as you code this section:
        # (a) this method must calcualte and return the recommendations for userX from the k most similar nearest neighbors
        # (b) the number, names, or format of the input parameters to this method must NOT be changed
        # (c) the method must use self.usersItemRatings (set during class object instantiation) to get the other users and their item ratings
        # (d) the method must use self.k (set during class object instantiation) to get the value of k
        # (e) the method must use the PearsonFn method defined in this class to calcualte similarity
               
        # Steps you might want to follow as you code this section:
        # (a) first, for given userX, get the sorted list of users - by most similar to least similar:
        #     - remember to exclude simialrity of user from himself 
        #     - remember to exclude any users with similarity of -2 (since that means error condition) 
        # (b) then, calcualte the weighted average item recommendations for userX from userX's k NNs
        # (c) then, return sorted list of recommendations (sorted highest to lowest ratings)
        #     example: [('Broken Bells', 2.64), ('Vampire Weekend', 2.2), ('Deadmau5', 1.71)]
        
        
        userx_rating = self.usersItemRatings[userX]
        k = self.k
        similar_list = []
        nearK_dic = {}

        ##StepA: Calculate and return the sorted Pearson Correlation for userX from the k most similar nearest neighbors
        for usery, usery_rating in self.usersItemRatings.items():
            # exclude similarity of user from himself
            if (userX not in usery):
                similarity=self.pearsonFn(userx_rating,usery_rating)

                # exclude any users with similarity of -2(invalid)
                if (similarity != -2):
                    similar_list.append((usery,similarity))

            # sorted list of K nearest-neighbor PC for each userX.
            nearK_dic = dict(sorted(similar_list, key= itemgetter(1), reverse=True)[:k])
        

        ##StepB: Calculate weighted average influence for UserX's KNN's rating
        sum_of_influence=0
        knn = []
        result = {}
        influence_dict = {}

        for usery, PCofXY in nearK_dic.items():
            # normalized PC = (PC+1)/2 (EXP: Veronica KNN=3: PC of Angelica 0.83 Jordyn 0.75 Chan 0.27)
            converted = (nearK_dic[usery] + 1) / 2
            # sum the denominator before calculate weighted average
            sum_of_influence = sum_of_influence + converted
            knn.append((usery, converted))

        #get the record of KNN name and its weighted average for each user
        for usery,converted in knn:
            # influence is weighted average of PC'
            influence = converted/sum_of_influence
            # dictionary of each KNN and KNN's weighted average of influence
            influence_dict[usery] = influence


        ##Step C: building recommendation for userX
        
        # build a new dictionary that consist of all rating( * by influence)from user's KNN
        for usery, PCofXY in nearK_dic.items():
            recommended_rating = self.usersItemRatings[usery]

            # get movie list of User's KNN had rated but user didn't rate
            for (movie, rating) in recommended_rating.items():
                if movie not in userx_rating.keys():
                    rating = (recommended_rating[movie] * influence_dict[usery])
                    #see if movie is already in recommendation result dictionary 
                    #if no, add {movie:rating} pair into result dictionary
                    if movie not in result.keys():
                        result.update({movie:rating})
                    #if movie already exist, just add the rating to existing key
                    else:
                        result[movie]= round(result[movie]+rating,2)
                    
        #convert recommendation result (dictionary) into recommendation list
        sortedresult=list(result.items())
        
        return sorted(sortedresult, key=itemgetter(1), reverse=True)
        
